version: 2.1
orbs:
  python: circleci/python@2.1.1
  aws-cli: circleci/aws-cli@3.1.5

workflows:
  ci:
    jobs:
      - run_unit_tests_python_client
      - run_unit_tests_server
      - integration_tests
      - build_image
      - build_docs
      - deploy_docs:
          filters:
            branches:
              only:
                - main

jobs:
  run_unit_tests_python_client:
    docker:
      - image: python:3.10-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - checkout # Extra text; checkout source code to working directory
      - environment_setup
      - install_client
      - run:
          name: python3 Version
          command: | # Make sure that the workflow is working
            python3 --version
      - run_unit_tests_python_client
  run_unit_tests_server:
    docker:
      - image: python:3.10-bookworm
        environment:
          ML_INFRA_DATABASE_URL: postgresql://postgres@localhost/circle_test
      - image: circleci/postgres:12.9-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
    resource_class: small
    parallelism: 1
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Setup AWS Config for Testing
          command: |
            mkdir -p ~/.aws
            cat > ~/.aws/credentials \<< EOF
            [default]
            aws_access_key_id = dummy
            aws_secret_access_key = dummy
            EOF
            cat > ~/.aws/config \<< EOF
            [default]
            region = us-west-2
            output = json
            EOF
      - environment_setup
      - install_server
      - run:
          name: python3 Version
          command: | # Make sure that the workflow is working
            python3 --version
      - run_unit_tests_server
  build_docs:
    docker:
      - image: python:3.10-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - checkout # checkout source code to working directory
      - environment_setup
      - install_client
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-docs.txt
      - run:
          name: Build Docs
          command: |
            mkdocs build --strict
  deploy_docs:
    docker:
      - image: python:3.10-bookworm
    resource_class: small
    parallelism: 1
    steps:
      - add_ssh_keys: # gives write access to CircleCI worker
          fingerprints:
            - "76:0c:1b:9e:e3:6a:c3:5c:6f:24:91:ef:7c:54:d2:7a"
      - checkout # checkout source code to working directory
      - environment_setup
      - install_client
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements-docs.txt
      - run:
          name: Deploy Docs
          command: |
            mkdocs gh-deploy
  build_image:
    executor: ubuntu-large
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build . -f model-engine/Dockerfile -t model-engine:$CIRCLE_SHA1
  integration_tests:
    executor: ubuntu-large
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: ${CIRCLECI_ROLE_ARN}
          aws-region: AWS_REGION
      - run:
          name: Build Docker Image
          command: |
            docker build . -f model-engine/Dockerfile -t model-engine:$CIRCLE_SHA1
      - run:
          name: Install minikube
          command: |
            cd $HOME
            curl -LO https://storage.googleapis.com/minikube/releases/v1.35.0/minikube_latest_amd64.deb
            sudo dpkg -i minikube_latest_amd64.deb
            minikube start --vm-driver=docker --kubernetes-version=v1.23.0 --memory=49152 --cpus=14
      - run:
          name: Install kubectl, helm
          command: |
            cd $HOME/bin
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            curl -LO "https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl"
            chmod +x kubectl
      - run:
          name: Install helm chart dependencies (Redis, Postgres, Istio)
          command: |
            sudo apt-get update && sudo apt-get install -y expect
            pushd $HOME/project/.circleci/resources
            kubectl create namespace model-engine
            kubectl apply -f redis-k8s.yaml
            kubectl apply -f postgres-k8s.yaml
            kubectl create secret generic model-engine-postgres-credentials --from-literal=database_url=postgresql://postgres:circle_test@postgres.default:5432/circle_test
            kubectl create secret generic model-engine-postgres-credentials --from-literal=database_url=postgresql://postgres:circle_test@postgres.default:5432/circle_test -n model-engine
            export ISTIO_VERSION=1.15.0
            popd
            curl -L https://istio.io/downloadIstio | TARGET_ARCH=x86_64 sh -
            install istio-${ISTIO_VERSION}/bin/istioctl $HOME/bin
            $HOME/bin/istioctl install --set profile=demo -y
            kubectl create configmap default-config --from-literal=config="$(cat $HOME/project/.circleci/resources/.minikube-config-map | envsubst)"
            kubectl create configmap default-config --namespace model-engine --from-literal=config="$(cat $HOME/project/.circleci/resources/.minikube-config-map | envsubst)"
            cat $HOME/project/.circleci/resources/.minikube-registry-creds | envsubst | expect
            minikube addons enable registry-creds
      - run:
          name: Pre-load model-engine image to minikube
          command: |
            minikube --logtostderr -v 1 image load model-engine:$CIRCLE_SHA1
      - run:
          name: Pre-load integration test images to minikube
          command: |
            docker build -f model-engine/model_engine_server/inference/pytorch_or_tf.base.Dockerfile \
            --build-arg BASE_IMAGE=python:3.8-slim \
            --build-arg REQUIREMENTS_FILE="$CIRCLE_SHA1-base-requirements.txt" \
            -t temp:1.11.0-cuda11.3-cudnn8-runtime-$CIRCLE_SHA1 .

            touch $CIRCLE_SHA1-requirements.txt
            echo -e "cloudpickle==2.1.0\npyyaml==6.0" > $CIRCLE_SHA1-requirements.txt

            DOCKER_BUILDKIT=1 docker build -f model-engine/model_engine_server/inference/pytorch_or_tf.user.Dockerfile \
            --build-arg BASE_IMAGE=temp:1.11.0-cuda11.3-cudnn8-runtime-$CIRCLE_SHA1 \
            --build-arg REQUIREMENTS_FILE="$CIRCLE_SHA1-requirements.txt" \
            -t $CIRCLECI_AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/hosted-model-inference/async-pytorch:1.11.0-cuda11.3-cudnn8-runtime-$CIRCLE_SHA1-b8c25b .
            rm $CIRCLE_SHA1-requirements.txt

            minikube --logtostderr -v 1 image load $CIRCLECI_AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/hosted-model-inference/async-pytorch:1.11.0-cuda11.3-cudnn8-runtime-$CIRCLE_SHA1-b8c25b
      - run:
          name: Install helm chart
          command: |
            pushd $HOME/project/charts
            cat model-engine/values_circleci.yaml | envsubst > model-engine/values_circleci_subst.yaml
            helm install model-engine model-engine --values model-engine/values_circleci_subst.yaml --set tag=$CIRCLE_SHA1 --atomic --debug
      - run:
          name: Change python version to 3.10.14
          command: |
            pyenv install 3.10.14
            pyenv global 3.10.14
      - run:
          name: Install integration test dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev libssl-dev python3-dev
            pip install -r model-engine/requirements.txt
      - install_client
      - install_server
      - run:
          name: Run integration tests
          command: |
            pushd $HOME/project
            kubectl port-forward svc/model-engine 5001:80 &
            export GIT_TAG=$CIRCLE_SHA1
            pytest integration_tests

executors:
  ubuntu-large:
    machine:
      image: default
    resource_class: 2xlarge

commands:
  environment_setup:
    description: Basic Environment setup
    steps:
      - run:
          name: Install Basic Environment Dependencies
          command: | # install dependencies
            apt-get update
            apt-get -y install curl
            pip install --upgrade pip
            pip install -r $HOME/project/requirements-dev.txt
  install_server:
    description: Installs LLM Engine server
    steps:
      - python/install-packages:
          pkg-manager: pip
          app-dir: model-engine
      - python/install-packages:
          pkg-manager: pip
          app-dir: model-engine
          pip-dependency-file: requirements-test.txt
      - python/install-packages:
          pkg-manager: pip
          app-dir: model-engine
          pip-dependency-file: requirements_override.txt
      - run:
          name: Install Server
          command: |
            pushd model-engine
            pip install -e .
            popd
  install_client:
    description: Install LLM Engine client
    steps:
      - run:
          name: Install LLM Engine client
          command: |
            pip install --upgrade pip
            pip install -e $HOME/project/clients/python
  run_unit_tests_python_client:
    description: Unit tests of the python client
    steps:
      - run:
          name: Type Check
          command: |
            pushd clients/python
            mypy . --install-types --non-interactive
            popd
  run_unit_tests_server:
    description: Unit tests of the server
    steps:
      - run:
          name: Black Formatting Check # Only validation, without re-formatting
          command: |
            black --check --config .black.toml .
      - run:
          name: Isort Formatting Check # Only validation, without re-formatting
          command: |
            isort . --check-only --verbose
      - run:
          name: Ruff Lint Check
          command: |
            ruff check .
      - run:
          name: Type Check
          command: |
            pushd model-engine
            mypy . --install-types --non-interactive
            popd
      - run:
          name: Unit Tests
          command: |
            pushd model-engine
            GIT_TAG=$(git rev-parse HEAD) WORKSPACE=.. pytest --cov --cov-config .coveragerc --cov-report=xml
            diff-cover coverage.xml --compare-branch=origin/main --fail-under=80
            popd
